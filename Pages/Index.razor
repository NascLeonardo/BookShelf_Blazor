@page "/"
@page "/Index"
@using BookShelf_Blazor.Model
@inherits BaseComponent

<MudStack >
	<h2>Home </h2>
	@if (booksOnShelf!= null && booksOnShelf.Count()>0)
	{
		<MudStack>
			@{
				double[] data = { booksOnShelf.Where(x=>x.bookStatus==Enums.BookStatus.Finished).Count(), booksOnShelf.Where(x=>x.bookStatus==Enums.BookStatus.Reading).Count(), booksOnShelf.Where(x=>x.bookStatus==Enums.BookStatus.Wished).Count(), booksOnShelf.Where(x=>x.bookStatus==Enums.BookStatus.TBR).Count() };
			}
			 <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@data" InputLabels="@labels">
				<CustomGraphics>
					<text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Total</text>
					<text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@data.Sum().ToString()</text>
				</CustomGraphics>
			</MudChart>
		</MudStack>


		
		<h3>Latest on the shelf:</h3
		<MudStack Row="true">
			<BookShelf_Blazor.Components.BookInfo book="booksOnShelf.OrderByDescending(x=>x.DateAddToShelf).First()">

			</BookShelf_Blazor.Components.BookInfo>
		</MudStack>
		<br />
		@if (booksOnShelf.Where(x => x.bookStatus == Enums.BookStatus.Reading) != null)
		{

			<h3>Books that you are reading:</h3
			<MudStack Row="true" Class="overflow-auto">	

					@{
						var readingBooks = booksOnShelf.Where(x => x.bookStatus == Enums.BookStatus.Reading).ToList();
					}
					@foreach (var book in readingBooks.OrderByDescending(x => x.DateStartedRead).ToList())
					{
						<BookShelf_Blazor.Components.BookInfo book="book">

							if (book.DateStartedRead.HasValue)
							{
								<MudText Typo="Typo.subtitle2">Started reading in @book.DateStartedRead.Value.ToShortDateString()</MudText>
							}
						</BookShelf_Blazor.Components.BookInfo>
					}

		
			</MudStack>
		}
	}
</MudStack>

@code {
	private List<Book>? booksOnShelf { get; set; } = null;
	private string[] labels = { "Finished", "Reading", "Wished", "To be Read" };

	protected override void OnInitialized()
	{
		booksOnShelf = GetBooks();
	}
}
