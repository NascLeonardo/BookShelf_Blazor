@page "/Shelf/{option?}"
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inherits BaseComponent;
@using BookShelf_Blazor.Model
@using Enums;


<PageTitle>Your Shelf</PageTitle>

<MudMenu Class="mt-3" Label="Order by" Variant="Variant.Filled" EndIcon="@Icons.Filled.KeyboardArrowDown" Color="Color.Secondary" IconColor="Color.Primary">
	<MudMenuItem OnClick="orderByNewestOnShelf">Newest on shelf</MudMenuItem>
	<MudMenuItem OnClick="orderByOldestOnShelf">Oldest on shelf</MudMenuItem>
	<MudMenuItem OnClick="orderByAuthor">Author</MudMenuItem>
	<MudMenuItem OnClick="orderByTitle">Title</MudMenuItem>
	<MudMenuItem OnClick="orderByRating">Rating</MudMenuItem>
</MudMenu>

<div class="mt-1 d-flex flex-column align-center">
	<MudPagination BoundaryCount="1" MiddleCount="3" ShowFirstButton="true" ShowLastButton="true" Count="@pages" Class="mt-4" SelectedChanged="changePage" Size="Size.Small" />
</div>
<br>
@{
	string info = $"Showing {books.Skip(10 * (page - 1)).Take(10).Count()} of {books.Count()}";
}
<MudText Class="mt-3" Typo="Typo.caption" Color="Color.Info">@info</MudText>
<MudGrid Class="mt-3">

	@foreach (var book in books.GetRange(10 * (page - 1), books.Skip(10 * (page - 1)).Take(10).Count()))
	{
		<MudItem xs=12 lg=6 Class="shadow-lg">
			<BookShelf_Blazor.Components.BookInfo book="@book">
				@{
					string status = @book.bookStatus.ToString();
				}
				<MudText Color="Color.Info">
					@status
				</MudText>
				@if (book.bookStatus == BookStatus.Finished)
				{
					<MudRating @onclick="() => updateRating(book)" @bind-SelectedValue="book.rating" />
				}
				<br>
				<MudMenu Label="@book.bookStatus.ToString()" Variant="Variant.Filled" Class="mb-1" EndIcon="@Icons.Filled.KeyboardArrowDown" Color="Color.Dark" IconColor="Color.Primary">
					@if (book.bookStatus != BookStatus.TBR)
					{
						<MudMenuItem OnClick="() => remove(book)">Remove from Shelf</MudMenuItem>
					}
					@if (book.bookStatus != BookStatus.Finished)
					{
						<MudMenuItem OnClick="() => saveAsFinished(book)">As Read</MudMenuItem>
					}
					@if (book.bookStatus != BookStatus.Reading)
					{
						<MudMenuItem OnClick="() => saveAsReading(book)">As Reading</MudMenuItem>
					}
					@if (book.bookStatus != BookStatus.Wished)
					{
						<MudMenuItem OnClick="() => saveAsWished(book)">As To Buy</MudMenuItem>
					}
					@if (book.bookStatus != BookStatus.TBR)
					{
						<MudMenuItem OnClick="() => saveAsTBR(book)">As To Be Read</MudMenuItem>
					}
				</MudMenu>
			</BookShelf_Blazor.Components.BookInfo>

		</MudItem>
	}
</MudGrid>

<div class="mt-1 d-flex flex-column align-center">
	<MudPagination Selected="page" BoundaryCount="1" MiddleCount="3" ShowFirstButton="true" ShowLastButton="true" Count="@pages" Class="mt-4" SelectedChanged="changePage" Size="Size.Small" />
</div>


@code {
	[Parameter]
	public string? option { get; set; }
	private List<Book> books { get; set; }
	private BookStatus? status = null;

	public int pages = 0;
	public int page = 1;
	public void changePage(int i){
		page=i;
	}



	protected override void OnParametersSet()
	{
		if (option != null)
		{
			if (!new string[] { "Finished", "TBR", "Reading", "Wished" }.ToList().Exists(x => x == option))
			{
				NavigationManager.NavigateTo("Shelf");
			}
			else if (option == "Finished")
			{
				status = BookStatus.Finished;
			}
			else if (option == "TBR")
			{
				status = BookStatus.TBR;
			}
			else if (option == "Reading")
			{
				status = BookStatus.Reading;
			}
			else if (option == "Wished")
			{
				status = BookStatus.Wished;
			}
		}
		else
		{
			status = null;
		}
		books = getBooksByStatus();

	}
	protected override void OnAfterRender(bool firstRender)
	{
		if(books != null)
		{
			pages = books.Count() % 10 != 0 ? books.Count() / 10 + 1 : books.Count() / 10;			
		}
	}
	private async void updateRating(Book book)
	{
		string message = "Failed to save";
		var severity = Severity.Error;
		if (updateBook(book))
		{
			message = "Book Saved Successfully!";
			severity = Severity.Success;
			StateHasChanged();
		}

		Snackbar.Add(message, severity, config =>
		{
			config.ShowCloseIcon = true;
		});
	}

	private void orderByNewestOnShelf()
	{
		books = getBooksByStatus().OrderByDescending(x => x.DateAddToShelf).ThenBy(x=>x.volumeInfo.title).ToList();
	}
	private void orderByOldestOnShelf()
	{
		books = getBooksByStatus().OrderBy(x => x.DateAddToShelf).ThenBy(x=>x.volumeInfo.title).ToList();
	}
	private void orderByAuthor()
	{
		books = getBooksByStatus().OrderBy(x => x.volumeInfo.authors[0]).ThenBy(x=>x.volumeInfo.title).ToList();
	}
	private void orderByTitle()
	{
		books = getBooksByStatus().OrderBy(x => x.volumeInfo.title).ThenBy(x=>x.volumeInfo.title).ToList();
	}
	private void orderByRating()
	{
		books = getBooksByStatus().OrderByDescending(x => x.rating).ThenBy(x=>x.volumeInfo.title).ToList();
	}

	private async void remove(Book book)
	{
		string message = "Failed to remove";
		var severity = Severity.Error;
		if (removeBook(book))
		{
			message = "Book Removed Successfully!";
			severity = Severity.Success;
			this.books = getBooksByStatus();
			StateHasChanged();
		}

		Snackbar.Add(message, severity, config =>
		{
			config.ShowCloseIcon = true;
		});
	}

	private async void saveAsFinished(Book book)
	{

		string message = "Failed to Update";
		var severity = Severity.Error;
		if (saveOnFinished(book))
		{
			message = "Book Updated Successfully!";
			severity = Severity.Success;
			this.books = getBooksByStatus();
			StateHasChanged();

		}

		Snackbar.Add(message, severity, config =>
		{
			config.ShowCloseIcon = true;
		});
	}

	private async void saveAsReading(Book book)
	{
		string message = "Failed to Update";
		var severity = Severity.Error;
		if (saveOnReading(book))
		{
			message = "Book Updated Successfully!";
			severity = Severity.Success;
			this.books = getBooksByStatus();
			StateHasChanged();
		}

		Snackbar.Add(message, severity, config =>
		{
			config.ShowCloseIcon = true;
		});
	}
	private async void saveAsWished(Book book)
	{
		string message = "Failed to Update";
		var severity = Severity.Error;
		if (saveOnWish(book))
		{
			message = "Book Updated Successfully!";
			severity = Severity.Success;
			this.books = getBooksByStatus();
			StateHasChanged();
		}

		Snackbar.Add(message, severity, config =>
		{
			config.ShowCloseIcon = true;
		});
	}
	private async void saveAsTBR(Book book)
	{
		string message = "Failed to Update";
		var severity = Severity.Error;
		if (saveOnTBR(book))
		{
			message = "Book Updated Successfully!";
			severity = Severity.Success;
			this.books = getBooksByStatus();
			StateHasChanged();
		}

		Snackbar.Add(message, severity, config =>
		{
			config.ShowCloseIcon = true;
		});
	}
	private List<Book>? getBooksByStatus()
	{
		if (status != null)
		{
			return GetBooks().Where(x => x.bookStatus == status).ToList();
		}
		return GetBooks();
	}
}
