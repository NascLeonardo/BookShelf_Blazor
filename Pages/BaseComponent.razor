@using BookShelf_Blazor.Enums
@using BookShelf_Blazor.Model
@using Newtonsoft.Json

@code {
    [Inject]
    private Blazored.LocalStorage.ISyncLocalStorageService localStorage { get; set; }


    
    public bool isOnShelf(Book book){

        return GetBooks().Any(x => x.id == book.id);
    }

    /// <summary>
    /// Get every saved book
    /// </summary>
    /// <param name="book"></param>
    /// <returns>Return a List<Book> with every book saved</returns>
    public List<Book> GetBooks()
    {
        List<Book> books = new List<Book>();
        try
        {
            if (localStorage.ContainKey("Books"))
            {
                books =  JsonConvert.DeserializeObject<List<Book>>(localStorage.GetItem<string>("Books"));
            }
        }catch (Exception e) {
            throw e;
        }
        return books;
    }

    /// <summary>
    /// Save the book with Finished status
    /// </summary>
    /// <param name="book"></param>
    /// <returns>Return true if the the book is saved successfully</returns>
    public bool saveOnFinished(Book book){
        try{
            var booksOnShelf = GetBooks();

            if(!isOnShelf(book)){
                book.DateAddToShelf = DateTime.Now;
                book.bookStatus = Enums.BookStatus.Finished;
                book.DateFinished = DateTime.Now;
                booksOnShelf.Add(book);

            }else{
                book = booksOnShelf.Single(x=>x.id == book.id);
                int indexToChange = booksOnShelf.FindIndex(x => x.id == book.id);
                booksOnShelf[indexToChange].DateFinished = DateTime.Now;
                booksOnShelf[indexToChange].bookStatus = Enums.BookStatus.Finished;
            }
            localStorage.SetItem("Books", JsonConvert.SerializeObject(booksOnShelf));
            return true;
        }catch (Exception e){
            throw e;
        }
    }

    /// <summary>
    /// Save the book with Wished status
    /// </summary>
    /// <param name="book"></param>
    /// <returns>Return true if the the book is saved successfully</returns>
    public bool saveOnWish(Book book){
        try{
            var booksOnShelf = GetBooks();

            if(!isOnShelf(book)){
                book.DateAddToShelf = DateTime.Now;               
                book.bookStatus = Enums.BookStatus.Wished;
                booksOnShelf.Add(book);

            }else{
                book = booksOnShelf.Single(x=>x.id == book.id);
                int indexToChange = booksOnShelf.FindIndex(x => x.id == book.id);
                booksOnShelf[indexToChange].bookStatus = Enums.BookStatus.Wished;
            }
            localStorage.SetItem("Books", JsonConvert.SerializeObject(booksOnShelf));
            return true;
        }catch (Exception e){
            throw e;
        }
    }

    /// <summary>
    /// Save the book with Reading status
    /// </summary>
    /// <param name="book"></param>
    /// <returns>Return true if the the book is saved successfully</returns>
    public bool saveOnReading(Book book){
        try{
            var booksOnShelf = GetBooks();

            if(!isOnShelf(book)){
                book.DateAddToShelf = DateTime.Now;
                book.DateStartedRead = DateTime.Now; 
                book.bookStatus = Enums.BookStatus.Reading;
                booksOnShelf.Add(book);

            }else{
                book = booksOnShelf.Single(x=>x.id == book.id);
                int indexToChange = booksOnShelf.FindIndex(x => x.id == book.id);
                booksOnShelf[indexToChange].bookStatus = Enums.BookStatus.Reading;
                booksOnShelf[indexToChange].DateStartedRead = DateTime.Now; 
            }
            localStorage.SetItem("Books", JsonConvert.SerializeObject(booksOnShelf));
            return true;
        }catch (Exception e){
            throw e;
        }
    }

    /// <summary>
    /// Save the book with TBR status
    /// </summary>
    /// <param name="book"></param>
    /// <returns>Return true if the the book is saved successfully</returns>
    public bool saveOnTBR(Book book){
        try{
            var booksOnShelf = GetBooks();

            if(!isOnShelf(book)){
                book.DateAddToShelf = DateTime.Now;
                book.bookStatus = Enums.BookStatus.TBR;
                booksOnShelf.Add(book);

            }else{
                book = booksOnShelf.Single(x=>x.id == book.id);
                int indexToChange = booksOnShelf.FindIndex(x => x.id == book.id);
                booksOnShelf[indexToChange].bookStatus = Enums.BookStatus.TBR;
            }
            localStorage.SetItem("Books", JsonConvert.SerializeObject(booksOnShelf));
            return true;
        }catch (Exception e){
            throw e;
        }
    }

    /// <summary>
    /// Update a book by removing the book with the same id from the saved and inserting the new state
    /// </summary>
    /// <param name="book"></param>
    /// <returns>Return true if the book was updated successfully</returns>
    public bool updateBook(Book book){
        try{
            var booksOnShelf = GetBooks();

            if(!isOnShelf(book)){
                return false;
            }else{
                int indexToChange = booksOnShelf.FindIndex(x => x.id == book.id);
                booksOnShelf[indexToChange] = book;
            }
            localStorage.SetItem("Books", JsonConvert.SerializeObject(booksOnShelf));
            return true;
        }catch (Exception e){
            throw e;
        }
    }
    /// <summary>
    /// Remove a book from the saved based on his id
    /// </summary>
    /// <param name="book"></param>
    /// <returns>Return true if the book was removed successfully</returns>
    public bool removeBook(Book book){
        try{
            var booksOnShelf = GetBooks();

            if(!isOnShelf(book)){
                return false;
            }else{
                int indexToRemove = booksOnShelf.FindIndex(x => x.id == book.id);
                booksOnShelf.RemoveAt(indexToRemove);
            }
            localStorage.SetItem("Books", JsonConvert.SerializeObject(booksOnShelf));
            return true;
        }catch (Exception e){
            throw e;
        }
    }
}
